#coding=utf-8

#sniffer with liter 
#author:frenzyh
#date:16/04/15

import socket
import sys
import struct
 
#解析以太网地址到容易识别的模式
def eth_addr (a) :
  MAC = "%.2x:%.2x:%.2x:%.2x:%.2x:%.2x" % (ord(a[0]) , ord(a[1]) , ord(a[2]), ord(a[3]), ord(a[4]) , ord(a[5]))
  return MAC
 
# 解析数据包
def receive(protocol):
    while True:
        packet = s.recvfrom(65565)
        packet = packet[0]
        eth_length = 14
         
        eth_header = packet[:eth_length]
        eth = unpack('!6s6sH' , eth_header)
        eth_protocol = socket.ntohs(eth[2])
        print 'Destination MAC : ' + eth_addr(packet[0:6]) + ' Source MAC : ' + eth_addr(packet[6:12]) + ' Protocol : ' + str(eth_protocol)
     
        #分析IP包, IP Protocol = 8
        if eth_protocol == 8 :
            #前20个字节头部信息段
            ip_header = packet[eth_length:20+eth_length]
             
            #解包
            iph = unpack('!BBHHHBBH4s4s' , ip_header)
     
            version_ihl = iph[0]
            version = version_ihl >> 4
            ihl = version_ihl & 0xF
     
            iph_length = ihl * 4
     
            ttl = iph[5]
            s_addr = socket.inet_ntoa(iph[8]);
            d_addr = socket.inet_ntoa(iph[9]);
     
            print 'Version : ' + str(version) + ' IP Header Length : ' + str(ihl) + ' TTL : ' + str(ttl) + ' Protocol : ' + str(protocol) + ' Source Address : ' + str(s_addr) + ' Destination Address : ' + str(d_addr)
     
            #TCP
            if protocol == 6 :
                t = iph_length + eth_length
                tcp_header = packet[t:t+20]
     
                #解包
                tcph = unpack('!HHLLBBHHH' , tcp_header)
                 
                source_port = tcph[0]
                dest_port = tcph[1]
                sequence = tcph[2]
                acknowledgement = tcph[3]
                doff_reserved = tcph[4]
                tcph_length = doff_reserved >> 4
                 
                print 'Source Port : ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Sequence Number : ' + str(sequence) + ' Acknowledgement : ' + str(acknowledgement) + ' TCP header length : ' + str(tcph_length)
                 
                h_size = eth_length + iph_length + tcph_length * 4
                data_size = len(packet) - h_size
                 
                #打印数据
                data = packet[h_size:]
                 
                print 'Data : ' + data
            #UDP
            elif protocol == 17 :
                u = iph_length + eth_length
                udph_length = 8
                udp_header = packet[u:u+8]
     
                #解包
                udph = unpack('!HHHH' , udp_header)
                 
                source_port = udph[0]
                dest_port = udph[1]
                length = udph[2]
                checksum = udph[3]
                 
                print 'Source Port : ' + str(source_port) + ' Dest Port : ' + str(dest_port) + ' Length : ' + str(length) + ' Checksum : ' + str(checksum)
                 
                h_size = eth_length + iph_length + udph_length
                data_size = len(packet) - h_size
                 
                #打印数据
                data = packet[h_size:]
                 
                print 'Data : ' + data
     
            #ICMP
            elif protocol == 1 :
                u = iph_length + eth_length
                icmph_length = 4
                icmp_header = packet[u:u+4]
     
                #解包
                icmph = unpack('!BBH' , icmp_header)
                 
                icmp_type = icmph[0]
                code = icmph[1]
                checksum = icmph[2]
                 
                print 'Type : ' + str(icmp_type) + ' Code : ' + str(code) + ' Checksum : ' + str(checksum)
                 
                h_size = eth_length + iph_length + icmph_length
                data_size = len(packet) - h_size
                 
                #打印数据
                data = packet[h_size:]
                 
                print 'Data : ' + data
     
            
            #开启混杂模式 如果是别的IP包
            else :
                print 'Protocol other than TCP/UDP/ICMP'
def liter():
    #主要的协议号只选取了ICMP UDP TCP其他的可以添加到receive()中
    #1 ICMP Internet 控制消息 
    #2 IGMP Internet 组管理 
    #3 GGP 网关对网关 
    #4 IP IP 中的 IP（封装） 
    #5 ST 流 
    #6 TCP 传输控制 
    #7 CBT CBT 
    #8 EGP 外部网关协议 
    #9 IGP 任何专用内部网关 
    #10 BBN-RCC-MON BBN RCC 监视 
    #11 NVP-II 网络语音协议 
    #12 PUP PUP 
    #13 ARGUS ARGUS 
    #14 EMCON EMCON 
    #15 XNET 跨网调试器 
    #16 CHAOS Chaos 
    #17 UDP 用户数据报 
    num=raw_input("Please input protocol what you need\n  1:TCP 2:UDP 3:ICMP\n")
    if num==1 :
        protocol=6
    elif num==2 :
        protocol=17
    else :
        protocol=1
    return protocol


if __name__ == '__main__':
    #创建AF_PACKET套接字
    try:
        s = socket.socket( socket.AF_PACKET , socket.SOCK_RAW , socket.ntohs(0x0003))
    except socket.error , msg:
        print 'Socket could not be created. Error Code : ' + str(msg[0]) + ' Message ' + msg[1]
        sys.exit()
    protocol=liter()
    receive(protocol)
